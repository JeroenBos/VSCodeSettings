{
    "window.zoomLevel": 1,
    "git.enableSmartCommit": true,
    "html.format.wrapAttributes": "force-aligned",
    "html.format.wrapLineLength": 90,
    "explorer.confirmDelete": false,
    "workbench.colorTheme": "Default Dark+",
    "editor.formatOnSave": true,
    "editor.autoClosingBrackets": "never",
    "gitlens.advanced.messages": {
        "suppressShowKeyBindingsNotice": true
    },
    "gitlens.historyExplorer.enabled": true,
    "files.autoSave": "afterDelay",
    "files.autoSaveDelay": 100,
    "explorer.confirmDragAndDrop": false,
    "terminal.integrated.copyOnSelection": true,
    "typescript.updateImportsOnFileMove.enabled": "always",
    "git.autofetch": true,
    "workbench.editor.enablePreview": false,
    "javascript.updateImportsOnFileMove.enabled": "always",
    "explorer.autoReveal": false,
    "editor.autoSurround": "never",
    "workbench.settings.editor": "json",
    "workbench.editor.closeOnFileDelete": true,
    "emmet.showExpandedAbbreviation": "inMarkupAndStylesheetFilesOnly",
    "update.enableWindowsBackgroundUpdates": false,
    "update.mode": "none",
    "workbench.list.automaticKeyboardNavigation": false,
    "files.watcherExclude": {
        "**/.git/objects/**": true,
        "**/.git/subtree-cache/**": true,
        "**/node_modules/**": true,
        "**/__pycache__/**": true,
        "**/.idea/**": true,
        "**/venv*/**": true,
    },
    "files.exclude": {
        "**/__pycache__": true,
        "**/.DS_Store": true,
        "**/.git": true,
        "**/.hg": true,
        "**/.pytest_cache": true,
        "**/.svn": true,
        "**/.vscode/numbered-bookmarks.json": true,
        "**/CVS": true,
        "**/logs/**": true,
        "**/__init__.py": true,
    },
    "numberedBookmarks.navigateThroughAllFiles": "replace",
    "numberedBookmarks.gutterIconFillColor": "#06961e",
    "numberedBookmarks.saveBookmarksInProject": true,
    "python.dataScience.askForKernelRestart": false,
    "python.dataScience.notebookFileRoot": "{$workspaceDir}",
    "python.linting.maxNumberOfProblems": 500,
    "python.linting.flake8Enabled": true,
    "python.linting.pylintEnabled": false,
    "python.linting.ignorePatterns": [
        "**/.vscode/**",
        "**/site-packages/**/*.py",
        "**/venv/**",
        "**/venv3.7/**",
        "**/lib/python3.7/**",
        "**/Python-3.8.0/Lib/**"
    ],
    "python.jediEnabled": false, // with true F12 seems to work more often. but importing alt+enter with true doesn't seem to work
    "python.linting.pylintArgs": [
        "--disable-all",
        "--max-line-length=120",
        "--variable-rgx=[a-z_][a-z0-9_]{0,30}$",
        "--argument-rgx=[a-z_][a-z0-9_]{0,30}$",
        "--disable=W0614,C0114,C0115,C0116", // W0614=unused-wildcard-import, C0114=missing-module-docstring, C0115=missing-class-docstring, C0116=missing-function-docstring
        "--ignore-patterns=\"**/vscode/**, **/venv*/**, **/venv3.7/**,~/Python*/**\""
    ],
    "python.analysis.logLevel": "Warning",
    "python.analysis.openFilesOnly": false,
    "python.dataScience.magicCommandsAsComments": true,
    "git.confirmSync": false,
    "python.linting.flake8CategorySeverity.E": "Error",
    "python.linting.flake8CategorySeverity.F": "Information",
    "python.linting.flake8CategorySeverity.W": "Information",
    "python.testing.pytestArgs": [
        "-s" // ensures print statements are shown
    ],
    "python.testing.unittestArgs": [
        "-s",
        "./tests",
    ],
    "editor.autoClosingQuotes": "never",
    "python.dataScience.sendSelectionToInteractiveWindow": false,
    "workbench.colorCustomizations": {
        "editor.selectionHighlightBackground": "#b6eca173",
    },
    "terminal.integrated.shellArgs.linux": [
        // "alias python='$HOME/git/ml-setup/venv/in/python3'"
    ],
    "extensions.ignoreRecommendations": false,
    "diffEditor.ignoreTrimWhitespace": false,
    "debug.onTaskErrors": "showErrors",
    "diffEditor.renderSideBySide": true,
    "editor.suggestSelection": "first",
    "terminal.integrated.commandsToSkipShell": [
        "test-explorer.reload-collection",
        "workbench.action.findInFiles",
        "workbench.action.files.saveAll",
        "editor.action.formatDocument",
        "editor.action.formatDocument",
        "actions.find",
        "workbench.action.navigateBack",
        "workbench.action.navigateBack",
        "workbench.action.navigateForward",
        "workbench.action.navigateForward",
        "search.action.collapseSearchResults",
        "search.action.replaceAll",
        "editor.foldAllMarkerRegions",
        "git.viewHistory",
        "explorer.newFile",
        "workbench.action.debug.start",
        "editor.debug.action.runToCursor",
        "expand_region",
        "undo_expand_region",
        "workbench.action.tasks.runTask",
        "workbench.action.quickOpen",
        "numberedBookmarks.jumpToBookmark1",
        "numberedBookmarks.jumpToBookmark2",
        "numberedBookmarks.jumpToBookmark3",
        "numberedBookmarks.jumpToBookmark4",
        "numberedBookmarks.jumpToBookmark5",
        "numberedBookmarks.jumpToBookmark6",
        "numberedBookmarks.jumpToBookmark7",
        "numberedBookmarks.jumpToBookmark8",
        "numberedBookmarks.jumpToBookmark9",
        "test-explorer.reload-collection",
        "workbench.action.closeActiveEditor",
        "workbench.action.showAllSymbols",
        "workbench.action.closeAllGroups",
        "workbench.view.extension.test",
        "workbench.view.explorer",
        "workbench.action.findInFiles",
        "workbench.view.scm",
        "workbench.view.debug",
        "workbench.actions.view.problems",
        "workbench.action.output.toggleOutput",
        "workbench.action.output.toggleOutput",
        "workbench.debug.action.toggleRepl",
        "editor.debug.action.toggleBreakpoint",
        "extension.multiCommand.execute",
        "workbench.action.debug.restart",
        "workbench.action.debug.stop",
        "workbench.action.debug.start",
        "editor.debug.action.runToCursor",
        "workbench.action.debug.stepOver",
        "extension.node-debug.startWithStopOnEntry",
        "workbench.action.debug.stepInto",
        "workbench.action.debug.stepOut",
        "workbench.action.toggleFullScreen",
        "editor.action.revealDefinition",
        "editor.action.goToImplementation",
        "editor.action.goToReferences",
        "references-view.find",
        "editor.action.peekImplementation",
        "editor.gotoNextSymbolFromResult",
        "goToNextReference",
        "goToPreviousReference",
        "editor.action.nextMatchFindAction",
        "editor.action.nextSelectionMatchFindAction",
        "editor.action.previousMatchFindAction",
        "editor.action.previousSelectionMatchFindAction",
        "editor.action.dirtydiff.next",
        "editor.action.dirtydiff.previous",
        "editor.action.marker.next",
        "editor.action.marker.nextInFiles",
        "editor.action.marker.prev",
        "editor.action.marker.prevInFiles",
        "undo",
        "redo",
    ],

    "multiCommand.commands": [
        // extension id = ryuta46.multi-command
        {
            "command": "test-explorer.reload-collection.multi",
            "sequence": [
                "workbench.view.extension.test",
                "test-explorer.reload-collection",
            ]
        },
        {
            "command": "test-explorer.run-all.multi",
            "sequence": [
                "workbench.view.extension.test",
                "test-explorer.reload-collection",
                "test-explorer.run-all",
            ]
        },
        { 
            "command": "editor.debug.action.toggleBreakpoint.multi",
            "sequence": [
                "workbench.action.focusActiveEditorGroup",
                "editor.debug.action.toggleBreakpoint",
            ]
        },
        { 
            "command": "workbench.action.debug.start.multi",
            "sequence": [
                "workbench.action.terminal.moveToLineEnd",
                "workbench.action.terminal.deleteToLineStart",
                "workbench.action.debug.start",
                "workbench.action.focusActiveEditorGroup",
            ]
        },
        {
            "command": "git.openFile.multi",
            "sequence": [
                "git.openFile",
                "git.openChange",
                "workbench.action.closeActiveEditor",
            ]
        },
    ],
    "search.exclude": {
        "**/logs/**": true
    },
}